package com.atb.app.activities;import androidx.appcompat.app.AppCompatActivity;import android.Manifest;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.os.Handler;import android.preference.PreferenceManager;import android.util.Log;import android.view.View;import com.applozic.mobicomkit.Applozic;import com.atb.app.R;import com.atb.app.base.CommonActivity;import com.atb.app.commons.Commons;import com.atb.app.model.BoostModel;import com.atb.app.preference.PrefConst;import com.atb.app.preference.Preference;import com.atb.app.service.BackgroundService;import com.facebook.FacebookSdk;import com.google.android.gms.common.internal.service.Common;import com.google.android.libraries.places.api.Places;import com.google.android.libraries.places.api.net.PlacesClient;import com.google.android.material.snackbar.Snackbar;import com.karumi.dexter.Dexter;import com.karumi.dexter.MultiplePermissionsReport;import com.karumi.dexter.PermissionToken;import com.karumi.dexter.listener.DexterError;import com.karumi.dexter.listener.PermissionRequest;import com.karumi.dexter.listener.PermissionRequestErrorListener;import com.karumi.dexter.listener.multi.MultiplePermissionsListener;import com.pubnub.api.PNConfiguration;import com.pubnub.api.PubNub;import com.pubnub.api.enums.PNLogVerbosity;import com.pubnub.api.enums.PNReconnectionPolicy;import org.json.JSONException;import org.json.JSONObject;import java.text.DateFormatSymbols;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.Locale;import java.util.regex.Pattern;import io.branch.referral.Branch;import io.branch.referral.BranchError;public class SplashActivity extends CommonActivity {    Bundle bundle;    String type = "" ,relative_id ="";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_splash);        Context ctx = getApplicationContext();        if(Commons.backgroundService == null) {            Intent backgroundService = new Intent(this, BackgroundService.class);            startService(backgroundService);        }        SharedPreferences prefs =PreferenceManager.getDefaultSharedPreferences(this);        type = prefs.getString(PrefConst.PREFKEY_NOTI_TYPE,"");        relative_id = prefs.getString(PrefConst.PREFKEY_RELATIVE_ID,"");        if (getIntent() != null) {            bundle = getIntent().getExtras();            if(getIntent().getBundleExtra("data")!=null) bundle = getIntent().getBundleExtra("data");            if (bundle != null) {                if(bundle.getString("type").equals("15")){                    bundle.putString("type","30");                }            }        }        Commons.Months = new DateFormatSymbols(Locale.ENGLISH).getShortMonths();        getPhoneSize();        Places.initialize(getApplicationContext(), getString(R.string.google_maps_key));      //  Applozic.init(this,getString(R.string.applozic_key));        PlacesClient placesClient = Places.createClient(this);      //  readCSV();        setPermission();    }    void setPermission(){        Dexter.withActivity(this)                .withPermissions(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA,Manifest.permission.READ_CALENDAR,Manifest.permission.WRITE_CALENDAR)                .withListener(allPermissionsListener_profile)                .withErrorListener(new PermissionRequestErrorListener() {                    @Override                    public void onError(DexterError error) {                    }                })                .check();    }    private MultiplePermissionsListener allPermissionsListener_profile = new MultiplePermissionsListener() {        @Override        public void onPermissionsChecked(MultiplePermissionsReport report) {            if (report.areAllPermissionsGranted()) gotoNextpage();            else if (report.isAnyPermissionPermanentlyDenied()) {                setPermission();            }        }        @Override        public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {            token.continuePermissionRequest();        }    };    void gotoNextpage() {        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                goTo(SplashActivity.this, LoginActivity.class, true,bundle);            }        }, 3000);    }    @Override public void onStart() {        super.onStart();        Branch branch = Branch.getInstance(getApplicationContext());        branch.initSession(new Branch.BranchReferralInitListener(){            @Override            public void onInitFinished(JSONObject referringParams, BranchError error) {                int feed_id = -1;                if (error == null) {                    // params are the deep linked params associated with the link that the user clicked -> was re-directed to this app                    // params will be empty if no data found                    // ... insert custom logic here ...                    try {                        if(referringParams.has("nav_here"))                            Commons.feed_id = referringParams.getInt("nav_here");                    } catch (JSONException e) {                        e.printStackTrace();                    }                } else {                }            }        }, this.getIntent().getData(), this);    }}